一、python函数式编程
计算机硬件--汇编语言--c语言--python语言（函数式）
参数基本语法：
1.def f1(a,b=2,c=3):
print a, b, c

2.def f2(s,*args):
print args
f2(1,2,3,4)
3.def g(a,*args,**kargs):
print a,args,kargs
g(1,2,3,4)
g(1,2,3,b=5,c=6)

函数式编程特点：
把计算视为函数而非指令
纯函数式编程：不需要变量，没有副作用，测试简单
支持高阶函数，代码简洁。

python支持的函数式编程的特点：
不是纯函数式编程：允许有变量
支持高阶函数：函数也可以作为变量传入
支持闭包：有了闭包就能返回函数
有限度地支持匿名函数

二、高阶函数
高阶函数：能就接收函数做参数的函数。
变量可以指向函数
函数的参数可以接收变量
一个函数可以接收另一个函数作为参数
能接收函数作参数的函数就是高阶函数
1.map()函数:
是python内置的高阶函数，接受一个函数f和一个list，并通过把函数f一次
作用在list的每个元素上，得到一个新的list并返回。
def f(x):
    return x*x
print map(f, [1, 2, 3, 4, 5, 6, 7, 8, 9])
利用map()函数，可以把一个 list 转换为另一个 list，只需要传入转换函数。
由于list包含的元素可以是任何类型，因此，map() 不仅仅可以处理只包含数值的 list，
事实上它可以处理包含任意类型的 list，只要传入的函数f可以处理这种数据类型。
例：假设用户输入的英文名字不规范，没有按照首字母大写，后续字母小写的规则，
请利用map()函数，把一个list（包含若干不规范的英文名字）变成一个包含规范英文名字
的list：
输入：['adam', 'LISA', 'barT']
输出：['Adam', 'Lisa', 'Bart']
def format_name(s):
    return s.lower()[0].upper() + s.lower()[1:]

print map(format_name, ['adam', 'LISA', 'barT'])

2.from functools import reduce
reduce()函数也是内置的高阶函数，reduce()函数接收的参数和map类似，但行为和map
不同，reduce函数传入的f必须接受两个参数，reduce函数对list的每个元素反复调用
函数f，并返回最终结果值。reduce还可以接收第3个可选参数，作为计算的初始值。
例如，编写一个f函数，接收x和y，返回x和y的和：
def f(x, y):
    return x + y
调用 reduce(f, [1, 3, 5, 7, 9])时，reduce函数将做如下计算：
先计算头两个元素：f(1, 3)，结果为4；
再把结果和第3个元素计算：f(4, 5)，结果为9；
再把结果和第4个元素计算：f(9, 7)，结果为16；
再把结果和第5个元素计算：f(16, 9)，结果为25；
由于没有更多的元素了，计算结束，返回结果25。
reduce()还可以接收第3个可选参数，作为计算的初始值。如果把初始值设为100，计算：
reduce(f, [1, 3, 5, 7, 9], 100)
结果将变为125，因为第一轮计算是：
计算初始值和第一个元素：f(100, 1)，结果为101。

3.filter()函数：python内置高阶函数，接收一个函数f和一个list，函数f的作用对每个
元素进行判断，返回true或false，filter根据判断结果自动过滤掉不符合条件的元素，
返回由符合条件元素组成的新list
例如，要从一个list [1, 4, 6, 7, 9, 12, 17]中删除偶数，保留奇数，首先，
要编写一个判断奇数的函数：
def is_odd(x):
    return x % 2 == 1
然后，利用filter()过滤掉偶数：
filter(is_odd, [1, 4, 6, 7, 9, 12, 17])
结果：[1, 7, 9, 17]
利用filter()，可以完成很多有用的功能，例如，删除 None 或者空字符串：
def is_not_empty(s):
    return s and len(s.strip()) > 0
filter(is_not_empty, ['test', None, '', 'str', '  ', 'END'])
结果：['test', 'str', 'END']
注意: s.strip(rm) 删除 s 字符串中开头、结尾处的 rm 序列的字符。
当rm为空时，默认删除空白符（包括'\n', '\r', '\t', ' ')，如下：

4.自定义排序函数
sorted()函数一个高阶函数，比较函数的定义是，传入两个待比较的元素x，y，如果
x应该排在y的前面，返回-1，如果x应该排在y的后面，返回1，如果x和y相等，返回0。
from functools import cmp_to_key
sorted(list,key=cmp_to_key(f)) f指自定义函数f(x,y)
例4：对字符串排序时，有时候忽略大小写排序更符合习惯。请利用sorted()高阶函数，
实现忽略大小写排序的算法。
输入：['bob', 'about', 'Zoo', 'Credit']
输出：['about', 'bob', 'Credit', 'Zoo']
def cmp_ignore_case(s1, s2):
    u1 = s1.lower()
    u2 = s2.lower()
    if u1 < u2:
        return -1
    if u1 > u2:
        return 1
    return 0

print sorted(['bob', 'about', 'Zoo', 'Credit'], cmp_ignore_case)

5.python中的闭包
内层函数引用了外层函数的变量（参数也算是变量），然后返回内层函数的情况，称为
闭包。
闭包的特点：返回的函数还引用了外层函数的局部变量，所以，要正确使用闭包，就要
确保引用的局部变量在函数返回后不能变。
三大特征：
1.嵌套函数
2.内部函数用到了外部函数
3.外部函数返回内部函数
注意：
1.内部函数不能“改变”外部变量
2.内部函数用到了外部变量为list，则可以从外部或内部改变值，并且即使外部没有引用也不会回收
def count():
    fs = []
    for i in range(1, 4):
        def f(j):
            def g():
                return j * j
            return g
        r = f(i)
        fs.append(r)
    return fs

f1, f2, f3 = count()
print f1(), f2(), f3()

6.python中的匿名函数
高阶函数可以接收函数做参数，有时候，我们不需要显式地定义函数，直接传入匿名函数更方便。
关键字lambda 表示匿名函数，冒号前面的x表示函数参数。lambda x：x*x
匿名函数有个限制，就是只能有一个表达式，不写return，返回值就是该表达式的结果。

三、python--装饰器：函数作为返回值
python内置的@语法就是为了简化装饰器调用
@new_fn
def f1(x):
   return x**2
作用：可以极大地简化代码，避免每个函数编写重复性。
打印日志：@log
检测性能：@performance
数据库事务：@transaction
URL路由：@post（‘/register’）

1.python中编写无参数decorator
存在问题：1.@装饰器会提前执行
	  2.目标函数无法带参数
	  3.目标函数调用后无法插入代码
decorator本质上就是一个高阶函数，它接收一个函数作为参数，然后返回一个新函数。
def log(f):
    def fn(*args, **kw):
        print 'call ' + f.__name__ + '()...'
        return f(*args, **kw)
    return fn
这对于任意函数，@log都能正常工作。
装饰器--二层嵌套结构：装饰器无法带参数
import time
def performance(f):
    def fn(*args,**kw):
        t1 = time.time()
        r = f(*args,**kw)（外部参数函数调用内部函数参数）
        t2 = time.time()
        print 'call %s() in %fs' %(f.__name__, (t2-t1))
        return r 
    return fn （返回内部函数）

@performance
def factorial(n):
    return reduce(lambda x,y: x*y, range(1, n+1))

print factorial(10)
计算函数调用的时间可以记录调用前后的当前时间戳，然后计算两个时间戳差。

2.python中编写带参数decorator--三层嵌套结构
带参数的log函数首先返回一个decorator函数，再让这个decorator函数接收my_func并返回新函数。
def log(prefix):
    def log_decorator(f):
        def wrapper(*args, **kw):
            print '[%s] %s()...' % (prefix, f.__name__)
            return f(*args, **kw)
        return wrapper
    return log_decorator

@log('DEBUG')
def test():
    pass
print test()
例2：三层嵌套的decorator来实现。
import time
def performance(unit):
    def perfor_decorator(f):
        def wrapper(*args, **kw):
            t1 = time.time()
            r = f(*args, **kw)
            t2 = time.time()
            t = (t2 - t1) * 1000 if unit == 'ms' else (t2 - t1)
            print('call %s() in %fs' %(f.__name__, t))
            return r
        return wrapper
    return perfor_decorator

@performance('ms')
def factorial(n):
    return reduce(lambda x,y: x*y, range(1, n+1))

print (factorial(10))
3.python中的偏函数
import functools
int2 = functools.partial(int, base=2)
就能得到二进制的转化函数。
自定义排序问题：
import functools
sorted_ignore_case = functools.partial(sorted, cmp = lambda s1,s2:cmp(s1.upper(),s2.upper()))
print sorted_ignore_case(['bob', 'about', 'Zoo', 'Credit'])

补充：递归 recursive -- 函数调用自己
1.斐波那契序列
def fib(n):
	if n <= 2:
	    return 1
	else:
	    return fib(n-1) + fib(n-2)
[fib(i) for i in range(1,12)]
简化为：
fib = lambda n:1 if n <=2 else fib(n-1)+fib(n-2)
2.字符串取反
def reverse_s(s):
	if len(s)<=1:
		return s
	else:
		return reverse_s(s[1:])+s[0]

s="ilikepython"
print (reverse_s

3.二分搜索
4.二分法求值
5.递归编程方法
快速排序：Introduction to algorithm, Tomas H.Cormen 算法导论

生成器和yield--Iterable，Iterator，Generator
使用yield的函数被称为生成器（generator）
跟普通函数不同的是：生成器是一个返回迭代器的函数，只能用于迭代操作。
在调用生成器运行的过程中，每次遇到yield时函数会暂停并保存当前所有的运行信息，返回yield的值。并在
下一次执行next()方法时从当前位置继续运行。
1.例子：斐波那契数列（yield -- next函数）
def fib_iter():
	a,b = 0,1
	while True:
		yield b
		a,b = b,a+b
A=fib_iter()
iter_result= [next(A) for i in range(10000)]

2.send用法(Generator)
def func():
    input = []
    while True:
	a = (yield)
	your statement
	input.append(a)
3.send,itertools
import itertools
horses = [1,2,3,4]
races = itertools.permutations(horses)
A = itertools.product([1,2],[3,4])
B = itertools.repeat([1,2],4)
C = itertools.chain(races, a, b)
例子：
import itertools

horses=[1,2,3,4]
races = itertools.permutations(horses)

a=itertools.product([1,2],[3,4])
b=itertools.repeat([1,2],4)

c=itertools.chain(races, a, b)

print ([i for i in c])

四、模块和包
包：就是文件夹 包也可以多级。
包下面有个__init__.py，注意每层包都必须要有！
模块：就是xxx.py文件
python之使用__future__
Python的新版本会引入新的功能，但是，实际上这些功能在上一个老版本中就已经存在了。
要“试用”某一新的特性，就可以通过导入__future__模块的某些功能来实现。
from __future__ import division
当新版本的一个特性与旧版本不兼容时，该特性将会在旧版本中添加到__future__中，
以便旧的代码能在旧版本中测试新特性。

五、python面向对象编程
1.面向对象编程的概念
一种程序设计范式，把程序看做不同对象的相互调用。对现实世界建立对象模型。
2.面向对象的基本思想
类和实例。
class class_name(base_class):
    class_var
    def methods(self,args):
	statements
经典类，新式类的区别：
1）__slots__
2)继承顺序，super
3）__new__
4)__getattribute__

2和3的区别，3都是新式类

类：用于定义抽象类型。类名以大写字母开头。
实例：根据类的定义被创建出来。
3.数据封装：
class Person：
      def __init__(self,name):
           self.name = name
p1 = Person('xiaoming')
p2 = Person('xiaojun')
p3 = Person('xiaohong')
按照 Python 的编程习惯，类名以大写字母开头，紧接着是(object)，
表示该类是从哪个类继承下来的。创建实例使用 类名+()，类似函数调用的形式创建：
class Person(object):
	pass
xiaoming = Person()
xiaoming.name = 'Xiao Ming'
xiaoming.gender = 'Male'
xiaoming.birth = '1990-1-1'
xiaohong = Person()
xiaohong.name = 'Xiao Hong'
xiaohong.school = 'No. 1 High School'
xiaohong.grade = 2
print xiaoming
print xiaohong
4.python中初始化实例属性
在定义 Person 类时，可以为Person类添加一个特殊的__init__()方法，当创建实例时，
__init__()方法被自动调用，我们就能在此为每个实例都统一加上以下属性：
class Person(object):
    def __init__(self, name, gender, birth):
        self.name = name
        self.gender = gender
        self.birth = birth
__init__() 方法的第一个参数必须是 self（也可以用别的名字，但建议使用习惯用法），
后续参数则可以自由指定，和定义函数没有任何区别。
例4：请定义Person类的__init__方法，除了接受 name、gender 和 birth 外，
还可接受任意关键字参数，并把他们都作为属性赋值给实例
class Person(object):
    def __init__(self, name, gender, birth,**kw):
        self.name = name
        self.gender = gender
        self.birth = birth
        for k, v in kw.iteritems():
            setattr(self, k, v)

xiaoming = Person('Xiao Ming', 'Male', '1990-1-1', job='Student')

print xiaoming.name
print xiaoming.job

5.python中访问限制
私有属性：__xxx
          _xxx
          __xxx__
class Car(object):
    country = u'中国'
    def __init__(self, length, width, height, owner=None):
        self.__owner = owner
        self._length = length
        self._width = width
        self._height = height
封装：私有属性
    def getLength(self):
        return self._length
        
    def setLength(self,value):
        assert value>0,"length must larger than 0"
        self._length = value

Python对属性权限的控制是通过属性名来实现的，如果一个属性由双下划线开头(__)，
该属性就无法被外部访问。

装饰器描述符：
@property:读取属性
@ower.setter
@owner.deleter
@length.setter

6.python中创建类属性
实例属性每个实例各自拥有，互相独立，而类属性有且只有一份。
class Person(object):
    address = 'Earth'
    def __init__(self, name):
        self.name = name
因为类属性是直接绑定在类上的，所以，访问类属性不需要创建实例，就可以直接访问：
print Person.address
# => Earth

对一个实例调用类的属性也是可以访问的，所有实例都可以访问到它所属的类的属性：
p1 = Person('Bob')
p2 = Person('Alice')
print p1.address
# => Earth
print p2.address
# => Earth
由于Python是动态语言，类属性也是可以动态添加和修改的：
Person.address = 'China'
print p1.address
# => 'China'
print p2.address
# => 'China'
例6：请给 Person 类添加一个类属性 count，每创建一个实例，count 属性就加 1，
这样就可以统计出一共创建了多少个 Person 的实例。
class Person(object):
    count = 0
    def __init__(self,name):
        self.name = name
        Person.count += 1

p1 = Person('Bob')
print Person.count

p2 = Person('Alice')
print Person.count

p3 = Person('Tim')
print Person.count

7.python中类属性和实例属性名字冲突怎么办
当实例属性和类属性重名时，实例属性优先级高，它将屏蔽掉对类属性的访问。
千万不要在实例上修改类属性，它实际上并没有修改类属性，而是给实例绑定了一个实例属性。

8.python中定义实例方法
实例的方法就是在类中定义的函数，它的第一个参数永远是 self，指向调用该方法的实例本身，
其他参数和一个普通函数是完全一样的
class Person(object):

    def __init__(self, name):
        self.__name = name

    def get_name(self):
        return self.__name
p1 = Person('Bob')
print p1.get_name()  # self不需要显式传入
# => Bob

9.python中方法也是属性
我们在 class 中定义的实例方法其实也是属性，它实际上是一个函数对象：
class Person(object):
    def __init__(self, name, score):
        self.name = name
        self.score = score
    def get_grade(self):
        return 'A'

p1 = Person('Bob', 90)
print p1.get_grade
# => <bound method Person.get_grade of <__main__.Person object at 0x109e58510>>
print p1.get_grade()
# => A
也就是说，p1.get_grade 返回的是一个函数对象，但这个函数是一个绑定到实例的函数，
p1.get_grade() 才是方法调用。
因为方法也是一个属性，所以，它也可以动态地添加到实例上，只是需要用 types.MethodType() 
把一个函数变为一个方法：
import types
def fn_get_grade(self):
    if self.score >= 80:
        return 'A'
    if self.score >= 60:
        return 'B'
    return 'C'

class Person(object):
    def __init__(self, name, score):
        self.name = name
        self.score = score

p1 = Person('Bob', 90)
p1.get_grade = types.MethodType(fn_get_grade, p1, Person)
print p1.get_grade()
# => A
p2 = Person('Alice', 65)
print p2.get_grade()
# ERROR: AttributeError: 'Person' object has no attribute 'get_grade'
# 因为p2实例并没有绑定get_grade
给一个实例动态添加方法并不常见，直接在class中定义要更直观。

10.python中定义类方法
和属性类似，方法也分实例方法和类方法。
在class中定义的全部是实例方法，实例方法第一个参数 self 是实例本身。要在class中定义类方法，需要这么写：
class Person(object):
    count = 0
    @classmethod
    def how_many(cls):
        return cls.count
    def __init__(self, name):
        self.name = name
        Person.count = Person.count + 1

print Person.how_many()
p1 = Person('Bob')
print Person.how_many()
通过标记一个 @classmethod，该方法将绑定到 Person 类上，而非类的实例。类方法的第一个参数将传入类本身，
通常将参数名命名为 cls，上面的 cls.count 实际上相当于 Person.count。

五、类的继承
（1）什么是类的继承
如果有一个新类：student
需要的属性有：name,gender,school,score
考察现有的person类：
class Person(object)：
	def __init__(self,name,gender):
		self.name = name
		self.gender = gender
利用现有的person类的属性和方法
class Student(Person)：
	def __init__(self,name,gender,school,score):
		super(Student, self).__init__(name,gender)
		self.school = school
		self.score = score
新类不必从头编写
新类从现有的类继承，就自动拥有了现有类的所有功能
新类只需要编写现有类缺少的新功能。
（2）继承的好处
复用已有代码
自动拥有了现有类的所有功能
只需要编写缺少的新功能。

（3）父类和子类
person -------- 父类，基类，超类
student ------- 子类，派生类，继承类
继承类就会形成继承树。
（4）继承的特点
子类和父类是is关系：
class Student(Person):
	pass
p = Person()
s = Student()
“p”是一个Person（√）       “s”是一个Student（√）
“p”是一个Student（×）      “s”是一个Person（√）
错误的继承
Student类和Book类是has关系：
class Student(Book):
	pass
has关系应该使用组合而非继承
Student类和Book类是has关系：
class Student(Person):
	def __init__(self, bookName):
		self.book = Book(bookName)

（5）python的继承
总是从某个类继承
class MyClass(object):
	pass
不要忘记调用super().__init__
def __init__(self, args):
	super(SubClass, self).__init__(args)
	pass

（6）python判断类型
函数isinstance()可以判断一个变量的类型，既可以用在Python内置的数据类型如str、list、dict，
也可以用在我们自定义的类，它们本质上都是数据类型。
假设有如下的 Person、Student 和 Teacher 的定义及继承关系如下：
class Person(object):
    def __init__(self, name, gender):
        self.name = name
        self.gender = gender

class Student(Person):
    def __init__(self, name, gender, score):
        super(Student, self).__init__(name, gender)
        self.score = score

class Teacher(Person):
    def __init__(self, name, gender, course):
        super(Teacher, self).__init__(name, gender)
        self.course = course

p = Person('Tim', 'Male')
s = Student('Bob', 'Male', 88)
t = Teacher('Alice', 'Female', 'English')
当我们拿到变量 p、s、t 时，可以使用 isinstance 判断类型：
>>> isinstance(p, Person)
True    # p是Person类型
>>> isinstance(p, Student)
False   # p不是Student类型
>>> isinstance(p, Teacher)
False   # p不是Teacher类型
这说明在继承链上，一个父类的实例不能是子类类型，因为子类比父类多了一些属性和方法。
>>> isinstance(s, Person)
True    # s是Person类型
>>> isinstance(s, Student)
True    # s是Student类型
>>> isinstance(s, Teacher)
False   # s不是Teacher类型
s 是Student类型，不是Teacher类型，这很容易理解。但是，s 也是Person类型，因为Student继承自Person，
虽然它比Person多了一些属性和方法，但是，把 s 看成Person的实例也是可以的。
这说明在一条继承链上，一个实例可以看成它本身的类型，也可以看成它父类的类型。
（7）python中多态
类具有继承关系，并且子类类型可以向上转型看做父类类型，如果我们从 Person 派生出 Student和Teacher ，
并都写了一个 whoAmI() 方法：
class Person(object):
    def __init__(self, name, gender):
        self.name = name
        self.gender = gender
    def whoAmI(self):
        return 'I am a Person, my name is %s' % self.name

class Student(Person):
    def __init__(self, name, gender, score):
        super(Student, self).__init__(name, gender)
        self.score = score
    def whoAmI(self):
        return 'I am a Student, my name is %s' % self.name

class Teacher(Person):
    def __init__(self, name, gender, course):
        super(Teacher, self).__init__(name, gender)
        self.course = course
    def whoAmI(self):
        return 'I am a Teacher, my name is %s' % self.name
在一个函数中，如果我们接收一个变量 x，则无论该 x 是 Person、Student还是 Teacher，
都可以正确打印出结果：
def who_am_i(x):
    print x.whoAmI()

p = Person('Tim', 'Male')
s = Student('Bob', 'Male', 88)
t = Teacher('Alice', 'Female', 'English')

who_am_i(p)
who_am_i(s)
who_am_i(t)
运行结果：
I am a Person, my name is Tim
I am a Student, my name is Bob
I am a Teacher, my name is Alice
这种行为称为多态。也就是说，方法调用将作用在 x 的实际类型上。s 是Student类型，
它实际上拥有自己的 whoAmI()方法以及从 Person继承的 whoAmI方法，但调用 s.whoAmI()
总是先查找它自身的定义，如果没有定义，则顺着继承链向上查找，直到在某个父类中找到为止。
由于Python是动态语言，所以，传递给函数 who_am_i(x)的参数 x 不一定是 Person 或 Person 的子类型。
任何数据类型的实例都可以，只要它有一个whoAmI()的方法即可：
class Book(object):
    def whoAmI(self):
        return 'I am a book'
这是动态语言和静态语言（例如Java）最大的差别之一。动态语言调用实例方法，不检查类型，
只要方法存在，参数正确，就可以调用。
（8）python中多重继承
除了从一个父类继承外，Python允许从多个父类继承，称为多重继承。
多重继承的继承链就不是一棵树了，它像这样：
class A(object):
    def __init__(self, a):
        print 'init A...'
        self.a = a

class B(A):
    def __init__(self, a):
        super(B, self).__init__(a)
        print 'init B...'

class C(A):
    def __init__(self, a):
        super(C, self).__init__(a)
        print 'init C...'

class D(B, C):
    def __init__(self, a):
        super(D, self).__init__(a)
        print 'init D...'
像这样，D 同时继承自 B 和 C，也就是 D 拥有了 A、B、C 的全部功能。多重继承通过 super()调用__init__()方法时，
A 虽然被继承了两次，但__init__()只调用一次：
>>> d = D('d')
init A...
init C...
init B...
init D...
多重继承的目的是从两种继承树中分别选择并继承出子类，以便组合功能使用。
例8：+-Person
  +- Student
  +- Teacher 是一类继承树；
+- SkillMixin
   +- BasketballMixin
   +- FootballMixin 是一类继承树。

通过多重继承，请定义“会打篮球的学生”和“会踢足球的老师”。
class Person(object):
    pass

class Student(Person):
    pass

class Teacher(Person):
    pass

class SkillMixin(object):
    pass

class BasketballMixin(SkillMixin):
    def skill(self):
        return 'basketball'

class FootballMixin(SkillMixin):
    def skill(self):
        return 'football'

class BStudent(Student, BasketballMixin):
    pass

class FTeacher(Teacher, FootballMixin):
    pass

s = BStudent()
print s.skill()

t = FTeacher()
print t.skill()

（9）python中获取对象信息
拿到一个变量，除了用 isinstance() 判断它是否是某种类型的实例外，还有没有别的方法获取到更多
的信息呢？
class Person(object):
    def __init__(self, name, gender):
        self.name = name
        self.gender = gender

class Student(Person):
    def __init__(self, name, gender, score):
        super(Student, self).__init__(name, gender)
        self.score = score
    def whoAmI(self):
        return 'I am a Student, my name is %s' % self.name
首先可以用 type() 函数获取变量的类型，它返回一个 Type 对象：
>>> type(123)
<type 'int'>
>>> s = Student('Bob', 'Male', 88)
>>> type(s)
<class '__main__.Student'>
其次，可以用 dir() 函数获取变量的所有属性：
>>> dir(123)   # 整数也有很多属性...
['__abs__', '__add__', '__and__', '__class__', '__cmp__', ...]

>>> dir(s)
['__class__', '__delattr__', '__dict__', '__doc__', '__format__', '__getattribute__', 
'__hash__', '__init__', '__module__', '__new__', '__reduce__', '__reduce_ex__', 
'__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', 
'gender', 'name', 'score', 'whoAmI']
对于实例变量，dir()返回所有实例属性，包括`__class__`这类有特殊意义的属性。
注意到方法`whoAmI`也是 s 的一个属性。
如何去掉`__xxx__`这类的特殊属性，只保留我们自己定义的属性？回顾一下filter()函数的用法。
dir()返回的属性是字符串列表，如果已知一个属性名称，要获取或者设置对象的属性，
就需要用 getattr() 和 setattr( )函数了：
>>> getattr(s, 'name')  # 获取name属性
'Bob'

>>> setattr(s, 'name', 'Adam')  # 设置新的name属性

>>> s.name
'Adam'

>>> getattr(s, 'age')  # 获取age属性，但是属性不存在，报错：
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: 'Student' object has no attribute 'age'

>>> getattr(s, 'age', 20)  # 获取age属性，如果属性不存在，就返回默认值20：
20

例9：对于Person类的定义：
class Person(object):
    def __init__(self, name, gender):
        self.name = name
        self.gender = gender
希望除了 name和gender 外，可以提供任意额外的关键字参数，并绑定到实例，
请修改 Person 的 __init__()定 义，完成该功能。
传入**kw 即可传入任意数量的参数，并通过 setattr() 绑定属性。
class Person(object):
    def __init__(self, name, gender, **kw):
        self.name = name
        self.gender = gender
        for k, v in kw.iteritems():
            setattr(self, k, v)

p = Person('Bob', 'Male', age=18, course='Python')
print p.age
print p.course

六、python中特殊方法
python如何把任意变量变成str：因为任何数据类型的实例都有一个特殊方法
__str__()
如果给Person类加上__str__()这个特殊方法：
python中的特殊方法：
用于print的__str__
用于len的__len__
用于cmp（比较函数）的__cmp__
特色方法的特点：
定义在class中；不需要直接调用；python的某些函数或操作符会调用对应的特殊方法
正确实现特殊方法：只需要编写用到的特殊方法；有关联的特殊方法都必须实现
比如：__getattr__
def __getattr__(self,name):
     print "__getattr__",name
     return self.__dict__.get(name,None)

      __setattr__
    def __setattr__(self,name,value):
        print "__setattr__",name
        if name!='owner':
            assert value>0, name+" must larger than 0"
        self.__dict__[name]=value

      __delattr__
    def __delattr__(self,name):
        print "__delattr__",name
        if name=='owner':
            self.__dict__[name]=None

(1)python中 __str__和__repr__
如果要把一个类的实例变成 str，就需要实现特殊方法__str__()：
class Person(object):
    def __init__(self, name, gender):
        self.name = name
        self.gender = gender
    def __str__(self):
        return '(Person: %s, %s)' % (self.name, self.gender)
现在，在交互式命令行下用 print 试试：
>>> p = Person('Bob', 'male')
>>> print p
(Person: Bob, male)
但是，如果直接敲变量 p：
>>> p
<main.Person object at 0x10c941890>似乎__str__() 不会被调用。
因为 Python 定义了__str__()和__repr__()两种方法，__str__()用于显示给用户，
而__repr__()用于显示给开发人员。
有一个偷懒的定义__repr__的方法：
class Person(object):
    def __init__(self, name, gender):
        self.name = name
        self.gender = gender
    def __str__(self):
        return '(Person: %s, %s)' % (self.name, self.gender)
    __repr__ = __str__

(2)python中 __cmp__
对 int、str 等内置数据类型排序时，Python的 sorted() 按照默认的比较函数 cmp 排序，但是
，如果对一组 Student 类的实例排序时，就必须提供我们自己的特殊方法 __cmp__()：
class Student(object):
    def __init__(self, name, score):
        self.name = name
        self.score = score
    def __str__(self):
        return '(%s: %s)' % (self.name, self.score)
    __repr__ = __str__

    def __cmp__(self, s):
        if self.name < s.name:
            return -1
        elif self.name > s.name:
            return 1
        else:
            return 0

上述 Student 类实现了__cmp__()方法，__cmp__用实例自身self和传入的实例 s 进行比较，如果 self 应该排在前面，就
返回 -1，如果 s 应该排在前面，就返回1，如果两者相当，返回 0。
Student类实现了按name进行排序：
>>> L = [Student('Tim', 99), Student('Bob', 88), Student('Alice', 77)]
>>> print sorted(L)
[(Alice: 77), (Bob: 88), (Tim: 99)]
注意: 如果list不仅仅包含 Student 类，则 __cmp__ 可能会报错：
L = [Student('Tim', 99), Student('Bob', 88), 100, 'Hello']
print sorted(L)

(3)python中 __len__
如果一个类表现得像一个list，要获取有多少个元素，就得用 len() 函数。
要让 len() 函数工作正常，类必须提供一个特殊方法__len__()，它返回元素的个数。
例3：斐波那契数列是由 0, 1, 1, 2, 3, 5, 8...构成。
请编写一个Fib类，Fib(10)表示数列的前10个元素，print Fib(10) 可以打印出数列的前 10 个元素，
len(Fib(10))可以正确返回数列的个数10。
class Fib(object):

    def __init__(self, num):
        a, b, L = 0, 1, []
        for n in range(num):
            L.append(a)
            a, b = b, a + b
        self.numbers = L
        
    def __str__(self):
        return str(self.numbers)
        
    __repr__ = __str__
        
    def __len__(self):
        return len(self.numbers)

f = Fib(10)
print f
print len(f)

（4）python中数学运算
Python 提供的基本数据类型 int、float 可以做整数和浮点的四则运算以及乘方等运算。
但是，四则运算不局限于int和float，还可以是有理数、矩阵等。
要表示有理数，可以用一个Rational类来表示四则运算：
def gcd(a, b):#用来化简
    if b == 0:
        return a
    return gcd(b, a % b)

class Rational(object):
    def __init__(self, p, q):
        self.p = p
        self.q = q

    def __add__(self, r):
        return Rational(self.p * r.q + self.q * r.p, self.q * r.q)

    def __sub__(self, r):
        return Rational(self.p * r.q - self.q * r.p, self.q * r.q)

    def __mul__(self, r):
        return Rational(self.p * r.p, self.q * r.q)

    def __div__(self, r):
        return Rational(self.p * r.q, self.q * r.p)

    def __str__(self):
        g = gcd(self.p, self.q)
        return '%s/%s' %(self.p / g,self.q / g)

    __repr__ = __str__

r1 = Rational(1, 2)
r2 = Rational(1, 4)
print r1 + r2
print r1 - r2
print r1 * r2
print r1 / r2

（5）python中类型转换
Rational类实现了有理数运算，但是，如果要把结果转为 int 或 float 怎么办？
要让int()函数正常工作，只需要实现特殊方法__int__():
class Rational(object):
    def __init__(self, p, q):
        self.p = p
        self.q = q
    def __int__(self):
        return self.p // self.q
>>> print int(Rational(7, 2))
3
>>> print int(Rational(1, 3))
0
同理，要让float()函数正常工作，只需要实现特殊方法__float__()。
class Rational(object):
    def __init__(self, p, q):
        self.p = p
        self.q = q

    def __int__(self):
        return self.p // self.q

    def __float__(self):
        return self.p / float(self.q)

print float(Rational(7, 2))
print float(Rational(1, 3))

（6）python中 @property
考察 Student 类：
class Student(object):
    def __init__(self, name, score):
        self.name = name
        self.score = score
当我们想要修改一个 Student 的 scroe 属性时，可以这么写：
s = Student('Bob', 59)
s.score = 60
但是也可以这么写：
s.score = 1000
显然，直接给属性赋值无法检查分数的有效性。
class Student(object):
    def __init__(self, name, score):
        self.name = name
        self.__score = score
    def get_score(self):
        return self.__score
    def set_score(self, score):
        if score < 0 or score > 100:
            raise ValueError('invalid score')
        self.__score = score
这样一来，s.set_score(1000) 就会报错.
这种使用 get/set 方法来封装对一个属性的访问在许多面向对象编程的语言中都很常见。
但是写 s.get_score() 和 s.set_score() 没有直接写 s.score 来得直接。
因为Python支持高阶函数，在函数式编程中我们介绍了装饰器函数，可以用装饰器函数把 
get/set 方法“装饰”成属性调用：
class Student(object):
    def __init__(self, name, score):
        self.name = name
        self.__score = score
    @property
    def score(self):
        return self.__score
    @score.setter
    def score(self, score):
        if score < 0 or score > 100:
            raise ValueError('invalid score')
        self.__score = score
注意: 第一个score(self)是get方法，用@property装饰，第二个score(self, score)是set方法，
用@score.setter装饰，@score.setter是前一个@property装饰后的副产品。
现在，就可以像使用属性一样设置score了：
>>> s = Student('Bob', 59)
>>> s.score = 60
>>> print s.score
60
>>> s.score = 1000
Traceback (most recent call last):
  ...
ValueError: invalid score
说明对 score 赋值实际调用的是 set方法。
例6：请给Student类加一个grade属性，根据 score 计算 A（>=80）、B、C（<60）。
class Student(object):
    def __init__(self, name, score):
        self.name = name
        self.__score = score
    @property
    def score(self):
        return self.__score
    @score.setter
    def score(self, score):
        if score < 0 or score > 100:
            raise ValueError('invalid score')
        self.__score = score
    @property
    def grade(self):
        if self.score < 60:
            return 'C'
        if self.score < 80:
            return 'B'
        return 'A'
s = Student('Bob', 59)
print s.grade
s.score = 60
print s.grade
s.score = 99
print s.grade

（7）python中 __slots__
由于Python是动态语言，任何实例在运行期都可以动态地添加属性。
如果要限制添加的属性，例如，Student类只允许添加 name、gender和score 这3个属性，
就可以利用Python的一个特殊的__slots__来实现，顾名思义，__slots__是指一个类允许的属性列表：
class Student(object):
    __slots__ = ('name', 'gender', 'score')
    def __init__(self, name, gender, score):
        self.name = name
        self.gender = gender
        self.score = score
>>> s = Student('Bob', 'male', 59)
>>> s.name = 'Tim' # OK
>>> s.score = 99 # OK
>>> s.grade = 'A'
Traceback (most recent call last):
  ...
AttributeError: 'Student' object has no attribute 'grade'
__slots__的目的是限制当前类所能拥有的属性，如果不需要添加任意动态的属性，
使用__slots__也能节省内存。
例7：假设Person类通过__slots__定义了name和gender，请在派生类Student中通过__slots__继续
添加score的定义，使Student类可以实现name、gender和score 3个属性。
class Person(object):
    __slots__ = ('name', 'gender')
    def __init__(self, name, gender):
        self.name = name
        self.gender = gender

class Student(Person):
    __slots__ = ('score',)
    def __init__(self, name, gender, score):
        super(Student, self).__init__(name, gender)
        self.score = score

s = Student('Bob', 'male', 59)
s.name = 'Tim'
s.score = 99
print s.score

（8）python中 __call__
在Python中，函数其实是一个对象：
>>> f = abs
>>> f.__name__
'abs'
>>> f(-123)
123
由于 f 可以被调用，所以，f 被称为可调用对象。所有的函数都是可调用对象。
一个类实例也可以变成一个可调用对象，只需要实现一个特殊方法__call__()。
我们把 Person 类变成一个可调用对象：
class Person(object):
    def __init__(self, name, gender):
        self.name = name
        self.gender = gender

    def __call__(self, friend):
        print 'My name is %s...' % self.name
        print 'My friend is %s...' % friend
>>> p = Person('Bob', 'male')
>>> p('Tim')
My name is Bob...
My friend is Tim...
单看 p('Tim') 你无法确定 p 是一个函数还是一个类实例，所以，在Python中，
函数也是对象，对象和函数的区别并不显著。
例8：改进一下前面定义的斐波那契数列：请加一个__call__方法，让调用更简单：
class Fib(object):
    def __call__(self, num):
        a, b, L = 0, 1, []
        for n in range(num):
            L.append(a)
            a, b = b, a + b
        return L

f = Fib()
print f(10)

总结：
1.python的函数式编程：
高阶函数
闭包
匿名函数
装饰器
2.python的模块和包：
避免名字冲突
引用模块
__future__的引用
3.python的面向对象编程：
类和实例
属性和方法
区分类属性和实例属性
4.类的继承：
继承的概念和目的
多态
多重继承
5.定制类：
定制类的目的
特殊方法
类型转换
__call__

元编程：
面向过程     语法->语句    元（meta）
面向函数     类―>对象      元类，元编程
面向对象     元类-> 类

最简单的元类：Type(name, bases, attrs)
              Name:类名字符串
              Bases：父类元组
	      Attrs：属性字典
A = type('A',(object,),{'b':1})
a = A()
print A,a.b



下一步继续学习：
（一）IO：文件和socket
python文件概念

文件：python中文件是对象
linux文件：一切设备都可以看成文件
例如：磁盘文件，管道，网络socket，外设等

文件属性：用户，读，写，执行权限

cat hello.py
#!/usr/bin/python
print "hello world"

ls -l

./hello.py #shell环境下的运行python文件

chmod +x hello.py
ls -l

python文件打开方式
open(name[,mode[buf]])
name:文件路径
mode：打开方式
mode   说明             注意
‘r’     只读方式打开     文件必须存在
‘w’     只写方式打开     文件不存在创建文件
‘a’     追加方式打开     文件存在则清空文件内容
‘r+’/‘w+’ 读写方式打开
‘a+’     追加和读写方式打开
‘rb’，‘wb’，‘ad’，‘rb+’，‘wb+’，‘ad+’：二进制方式打开

python读取方式
read([size]):读取文件（读取size个字节，默认读取全部）
readline:读取一行
readlines：读取完文件，返回每一行所组成的列表

python写入方式
write：将字符串写入文件
writelines：写多行到文件

python文件指针操作：
seek（offset[,whence]）：移动文件指针
offset：偏移量，可以为负数
whence：偏移相对位置

python文件指针定位方式：
os.SEEK_SET:相对文件起始位置；0
os.SEEK_CUR：相对文件当前位置；1
os.SEEK_END:相对文件结尾位置；2

python文件属性
file.fileno():文件描述符
file.mode:文件打开权限
file.encoding:文件编码格式
file.closed:文件是否关闭

python标准文件
文件标准输入：sys.stdin
文件标准输出：sys.stdout
文件标准错误：sys.stderr

python文件命令行参数
sys模块提供sys.argv属性，通过该属性可以得到命令行参数。

python文件编码格式
使用普通方式打开文件:写入u'慕课'，出现什么问题？
问：如何在这种场景下讲u‘慕课’写入文件？
答：unicode转码为‘utf-8’然后写入试试
a = unicode.encode(u'慕课','utf-8')

如何创建一个utf-8或者其他编码格式的文件
使用codecs模式提供方法创建指定编码格式文件
codecs.open(fname,mode,encoding,errors,buffering):
import codecs

使用os模块打开文件
os.open(filename,flag[,mode]):打开文件
flag：打开文件方式
os.O_CREAT:创建文件
os.O_RDONLY:只读方式打开
os.WRONLY:只写方式打开
os.O_RDWR:读写方式打开

使用os模块对文件进行操作
os.read(fd,buffersize):读取文件
os.write(fd,string)：写入文件
os.lseek(fd,pos,how):文件指针操作
os.close(fd):关闭文件

os.path模块方法介绍
os.path方法     说明
exists(path)      当前路径是否存在
isdir(s)          是否是一个目录
isfile(path)      是否是一个文件
getsize(filename) 返回文件大小
dirname(p)        返回路径的目录
basename(p)       返回路径的文件名

（二）多任务：进程和线程
并行编程：
并行和并发：
mapreduce：将任务划分为可并行的多个子任务，每个子任务完成后合并，得到结果。
流水：将任务划分为串行的多个子任务。每个子任务并行。productconsume
原因：
多核，云计算，使得实现并行编程的条件更容易满足。
大数据，机器学习，高并发，使得并行编程很必要。

难：
任务分割，共享数据的访问，死锁，互斥，信号量，利用管道，队列通信。线程，进程管理
python自带包
Threading：实现多线程  在python中是串行的。GIL
I/O密集型任务

MultiProcess：实现多进程 在python中是并行的。

并行编程----Lock
生产消费者模型：
	继承threading.Thread
	start() 开始至少调用一次
	Run() 类里可覆盖，在start时被调用
	Join() 等待直到线程终止
	setDaemon() 转到后台处理

L = threading.Condition([lock])
threading.Lock()
L.acquire() 获得
L.Release() 释放
L.Wait() 等待直到被唤醒
L.Notify() 唤醒进程

并行编程----Queue
From Queue import Queue
From multiprocessing .queues
import Queue
q = Queue(maxsize=10)
q.put(object)
q.get()
q.empty()
q.full()
q.qsize()

def put(xxx, block, timeout):
	self.not_full.acquire()
	判断是否满，对于满有两种处理方式
	组塞，wait，timeout
	非组塞，异常
	put(xxx)
	self.not_empty.notify()
 	self.not_full.release()
需要手动下载安装包：
Parallelpython：可实现分布式计算，同时解决CPU和网络资源受限问题
Celery+RabiitMQ/Redis：可实现分布式任务队列
Django和它搭配可实现异步任务队列

Gevent：可实现高效异步IO，协程。

CPU同一时刻只能调度一个进度，进程之间men独立，进程内线程共享mem。
数据库
web开发