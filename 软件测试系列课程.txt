软件测试基础课程：
一、软件测试的概念
软件测试的对象：软件需求、软件概要设计、软件详细设计、软件运行环境、可运行程序、
                软件源码。
软件测试的五大要素：质量（核心）、人员、资源、流程、技术
软件测试的两大目标：测试覆盖率、测试效率
软件测试所遵循的原则：测试显示缺陷的存在，但不能证明系统不存在缺陷。
                      穷尽测试是不可能的，应设定及时终止的条件。
                      软件测试应该尽早进行。
                      缺陷具备群集特性。
                      测试的杀虫剂悖论
                      测试的二八原则。80%的时间用在20%的重点模块上。
                      测试活动依赖于测试背景。
二、软件测试的分类
按测试阶段来分类：单元测试：对软件中的最小可测试单元进行检查和验证。
原则：1.尽可能保证各个测试用例是互相独立的。
      2.一般由代码的开发人员来实施，用以检验所开发的代码功能符合自己的设计要求。
益处：1.能尽早发现缺陷。
      2.有利于重构。
      3.简化集成。
      4.文档。
      5.用于设计。
限制：1.不可能覆盖所有的执行路径，所以不可能保证捕捉到所有的错误
      2.每一行代码，一般需要3~5行测试代码才能完成单元测试。所以存在投入和产出的一个平衡
框架：Xunit、Junit、Nunit、phpunit、cppunit
                  集成测试：是在单元测试基础上，测试在将所有的软件单元按照概要设计规格
说明的要求组装成模块、子系统或系统的过程中各部分工作是否达到或实现相应技术指标及要求的
活动。
主要实施方案：1.big bang
              2.自顶向下
              3.自底向上
              4.核心系统集成
              5.高频集成。
集成测试和单元测试区别：
1.测试的对象不同
2.测试的依据不同
3.测试的方法不同。
                  系统测试：是将经过集成测试的软甲，作为计算机系统的一个部分，与
系统中其他部分结合起来，在实际运行环境下对计算机系统进行的一系列严格有效地测试，
以发现软件潜在的问题，保证系统的正常运行。（真实的环境）
关注点：1.系统本身的使用
        2.系统与其他相关系统间的连通
        3.系统在不同使用压力下的表现
        4.系统在真实使用环境下的表现
系统测试和集成测试区别：
1.测试对象不同。
2.测试时间不同。
3.测试内容不同。
4.测试角度不同。
                  验收测试：交付测试。针对用户需求、业务流程的正式的测试，确定系统
是否满足验收标准，由用户、客户或其他授权机构决定是否接受系统。
细分：用户验收测试。开发方
      运行验收测试。运行和维护方面
      合同和规范验收测试。
      alpha测试。开发者。用户执行。
      beta测试。用户测试

按测试手段来分类：
（1）黑盒测试：优点：1.容易实施，不需要关注内部的实现。
                2.更贴近用户的使用角度。
          缺点：1.测试覆盖率较低，一般只能覆盖到代码量的不到40%。
                2.针对黑盒的自动化测试，复用率较低，维护成本较高。
          主要关注：1.是否有不正确或遗漏的功能
                    2.在接口上，输入是否能正确的接受，能否输出正确的结果。
                    3.是否有数据结构错误或外部信息访问错误。
                    4.性能上是否能够满足要求。
一般来说，系统测试阶段更多做黑盒测试。
           主要设计方法：等价类划分法、边界值分析法、错误推测法、因果图法
                          正交试验分析法、状态迁移图法、流程分析法

（2）白盒测试（结构化测试）：强调逻辑语句：语句、条件、条件组合、分支、路径。
               优点：1.迫使测试人员去仔细思考软件的实现，理解原理
                     2.检测代码中的每条分支和路径
                     3.揭示隐藏在代码中的错误
                     4.对代码的测试比较彻底
               缺点：1.昂贵
                     2.无法检测代码中遗漏的路径和数据敏感性错误
                     3.不能直接验证需求的正确性
               主要测试方法：代码检测法、静态结构分析法、静态质量度量法
                              逻辑覆盖法、基本路径测试法
（3）灰盒测试：介于黑、白盒测试之间的，关注输出对于输入的正确性，同时也关注内部表现。

（4）静态测试：指无须执行被测程序，而是通过评审软件文档或代码，度量程序静态复杂度。
方式：互审、走查、会议。

（5）动态测试：通过运行被测程序，检查运行结果与预期结果的差异，并分析运行效率，
正确性和健壮性等。

（6）手工测试：由专门的测试人员从用户视角来验证软件是否满足设计要求的行为。
更适用针对深度的测试和强度主观判断的测试。众包测试、探索式测试。
          优点：1.易发现缺陷 2.容易实施 3.创造性、灵活性
          缺点：1.覆盖量化难 2.重复测试效率低 3.不一致性、可靠性低 4.人力资源依赖


（7）自动化测试：使用单独的测试工具软件控制测试的自动化执行以及对预期和结果进行
自动检查。单元测试、接口测试、性能测试等。
          优点：1.高效率、速度快 2.高复用性 3.覆盖率容易度量 4.准确、可靠 5.不知疲劳
          缺点：1.机械、发现缺陷率低 2.一次性投入较大

按测试模式来分类
瀑布模型、敏捷测试、基于脚本的测试、基于风险的测试、探索式测试等
（1）传统的瀑布模型：
项目计划、需求分析、软件设计、程序开发、软件测试、集成维护。
优点：1.强调需求、设计的作用
      2.前一阶段完成后，只需关注后续阶段
      3.为项目提供了按阶段划分的检查点，里程碑清晰
      4.文档规范。
缺点：1.难以适应需求的频繁变化
      2.项目周期后段才能看到成果
      3.强制的里程碑、完成时间点
      4.文档工作量大。
（2）V模型
需求分析、概念设计、详细设计、软件编码
单元测试、集成测试、系统测试、验收测试
（3）W模型
对V模型进行了改进，将软件测试提前了。
（4）X模型
也是对V模型进行的改进。
（5）H模型
其他流程并发进行的。测试准备、测试就绪点、测试执行。
（6）敏捷测试
Agile Testing -- 遵循敏捷宣言传递给世界。
敏捷宣言：个体与交互 重于 过程和工具
          可用的软件 重于 完备的文档
            客户协作 重于 合同谈判
            响应变化 重于 遵循计划
在每对比较中，后者并非全无价值，只是更注重前者。
敏捷测试的特点：1.强度从客户角度进行测试
                2.重点关注迭代测试新功能，不在强调测试阶段
                3.尽早测试、不间断测试，具备条件即测试
                4.强调持续反馈
                5.预防缺陷重于发现缺陷。
与传统测试比较：
传统测试:1.测试是质量的最后保护者
         2.严格的变更管理
         3.预先的计划和细节的准备
         4.重量级文档
         5.各阶段测试严格的入口和出口标准
         6.更多在回归测试时进行重量级的自动化测试
         7.严格依赖流程执行
         8.测试团队和开发团队是相对独立的
敏捷测试：1.开发和测试人员是紧密合作，大家都有责任对软件负责
          2.变更是可接受的，拥抱变更
          3.计划随着进展时常调整
          4.只需要绝对必要的文档。
          5.各迭代之间已经没有明确明显的入口和出口标准
          6.所有阶段都需要自动测试，每个人都需要做，是项目集成的一部分
          7.流程不再需要严格执行
          8.团队合作是无缝隙合作。

（7）基于脚本的测试-SBT--传统测试
探索式测试（ET）：完全抛开测试脚本的测试。它是一种测试风格。
ST：1.系统性强
    2.容易管理、控制
    3.设计在先、执行在后
    4.主要是验证自己的思路
    5.可预见性
ET：1.自由灵活
    2.和ST是互补的
    3.执行和设计并行
    4.不断和系统交互，带着问题测试
    5.学习的过程。
局部探索式测试：输入、状态、代码路径、用户数据、执行环境。
全局探索式测试：漫游测试法。商业区-旅馆区-历史区-旅游区-娱乐区-破旧区

（8）基于风险的测试--RBT
一种基于对软件失效的风险评估并以此指导测试计划、设计、执行、结果评价的软件测试类型。
风险包括：1.质量风险 2.管理风险 3.风险级别 = 风险可能性 * 风险严重度
识别风险的可能性：复杂性、时间压力、高变更率、技能水平、地理分散度
严重

（9）基于模型的测试--MBT
借助工具建模，主要MBT工具：Spec Explorer。

三、软件测试类型
1.功能测试
根据产品特性、操作描述和用户方案，测试一个产品的特性和可操作行为以确定它们满足设计需求。
针对的问题：
功能错误或遗漏、界面问题、性能错误、数据及访问错误初始化及终止错误。
功能测试工具：QTP(winrunner) 基于关键字驱动的。
              silkTest
              Rational robot
              selenium：基于web测试。敏捷测试中。
              Watir：开源测试工具。基于web测试
              Sikuli：基于屏幕截图测试，简单的功能测试。

2.性能测试：
负载测试、压力测试、稳定性测试。
性能指标：并发用户数VU
          每秒事务数TPS
          系统响应时间
          设备性能
性能测试工具：LoadRunner
              Silkperformer
              Jmeter
              Webload
              Apache Bench
              LoadUI
静态性能评估：开发web应用是，基于一系列web应用页面性能优化的最佳实践对web应用
              的页面进行静态分析，并给出评估结果的性能分析方法。
评估工具：YSlow
          PageSpeed
应用性能管理（APM）：提供对系统的实时监控以实现性能管理、故障管理的解决方案。

3.安全测试：对软件产品进行测试以确保其符合产品安全需求和质量标准。
渗透测试：通过模拟对软件系统的恶意攻击行为来评估系统安全性的一种测试。
OWASP（open web applicaion security community）：top10 十大安全漏洞。
test guide project。
安全测试工具：Appscan
              webinspect
              Nessus：针对主机和服务器
              Nmap：端口
              MetaSploit：
              Webscarab：
              Fortify：白盒测试，针对源代码静态分析
              W3AF：开源，针对web应用。

4.兼容性测试
软件本身的兼容性：对历史配置和数据、功能要兼容
不同平台下的兼容性：开发服务器
软件对运行设备的兼容性。
软件互操作性。
浏览器内核：trident4-6，IE6-8，9，10.
Firefox：gecko
safari、chrome：webkit
浏览器兼容性工具：browser shots。截图比对。
                  Browser Sandbox 插件
                  google浏览器兼容测试插件（http://www.w3help.org）

5.文档测试
针对软件产品的交付品，配套的文档类部件的测试。如用户手册、使用说明、用户帮助文档等。
关注要点：完整性、正确性、一致性、易理解性、易浏览性

6.可靠性测试：
软件可靠性、硬件可靠性。

7.易用性测试
指测试用户使用软件时是否感觉方便，是否能保证用户使用体验的测试类型。

8.本地化测试
针对软件的本地化版本实施的针对性测试。
主要测试内容：语言、书写习惯
              时区、日期格式、货币
              当地风俗、法律法规
              政治敏感内容。

9.部署测试
安装测试，主要验证系统部署过程，并确保软件经过安装测试后可以正常使用。
主要测试内容：在不同环境下的部署验证。
              参照部署文档执行，过程的合理、正确性。
              基础数据
              
10.无障碍测试
可访问性测试。是指软件需要提供便于特殊人群使用的功能，包括视障、听障、老年人。

四、其他的一些测试类型概念
1.回归测试
软件功能修改后，对软件进行重新测试以确认修改没有引入新的错误或导致其他部分产生错误。
回归测试的重心：关键模块和重点功能组件。
软件研发周期中会进行多次回归测试，且尽量实现自动化。
最适合自动化测试。

2.Monkey测试
搞怪测试。就是用一些随机、稀奇古怪的方式来操作软件，已测试系统的健壮性和稳定性。

3.冒烟测试
来自于硬件板卡验证术语，软件上则用于确认代码中的更改会按预期运行，且不会破坏整个版本的稳定性
“每日构建”中用冒烟测试来确认合入的代码没有影响主要功能的正常。

4.A/B测试
多用于互联网行业，通过为页面提供2个版本给用户使用并记录相关的用户行为数据，
来确定更优化的一种测试方案。
实施要点：多个方案并行
          每次测试仅改动一个变量
          按照某种规则进行优胜劣汰。
工具有：google analytics content experiments 不同页面版本之后。完成测试基础的工作
        visual website optimizer 采集用户使用数据。



一、性能测试之LoadRunner
1.性能测试理论
（1）性能测试的常用术语
1）性能测试主要通过自动化的测试工具模拟多种正常、峰值已经异常负载条件
来对系统的各项性能指标进行测试。

2）性能测试分类：性能测试（狭义）
                  方法：通过模拟生产运行的业务压力量和使用场景组合，测试系统的
                        的性能是否满足生产性能要求。
                  目的：验证系统是否有系统宣称具有的能力。
              负载测试
                   方法：通过在被测系统上不断加压，直到性能指标达到极限。
                   目的：找到系统处理能力的极限。
              压力测试（强度测试）
                   方法：测试系统在一定饱和状态下，系统能够处理的会话能力
                         ，以及系统是否会出现错误。
                   目的：检查系统处于压力性能下时，应用的表现。
              并发测试
                   方法：通过模拟用户并发访问，测试多用户并发访问同一个应用、模块或者
                         数据记录时是否存在死锁或其他性能问题。
                   目的：发现系统中可能隐藏的并发访问时的问题。
              配置测试
                   方法：通过对被测试系统的软硬件环境的调整，了解各种不同对系统的性能影响
                         的程度，从而找到系统各项资源的最优分配原则。
                   目的：了解各种不同因素对系统性能影响的程度。
              可靠性测试（稳定测试）
                    方法：在给系统加载一定业务压力的情况下，使系统运行一段时间，
                          以此检测系统是否稳定。
                    目的：验证系统是否支持长期稳定的运行。

3）性能测试的流程
测试计划阶段-->测试设计阶段-->测试开发阶段-->测试执行阶段-->测试结果分析阶段-->测试报告阶段
a）测试计划阶段的工作内容：明确测试对象
                           定义测试目标
                           定义测试通过的标准
                           规划测试进度
                           规划测试参与人员（需求、开发、测试、运维和配置）
                           申请测试资源
                            风险控制 

b）测试设计阶段的工作内容：设计测试数据
                           设计测试用例
                           设计测试场景

c）测试开发阶段的工作内容：测试环境搭建
                           测试过程文档定义已经配置
                           测试脚本开发、调试
                           测试数据准备
                           基准测试

d）测试执行阶段的工作内容：执行测试用例模型，包括执行脚本和场景
                           测试过程监控，包括查看log，监控服务器资源，数据库和中间件等

e）测试结果分析阶段的工作内容：根据测试结果和监控结果进行测试分析
                               根据性能测试目标，分析出系统存在的性能瓶颈
                                并给出优化建议。

f）测试报告的内容：测试范围
                   测试执行以及参与人员
                   基准测试数据
                   测试执行的详细步骤（场景设计）
                   测试数据记录、监控结果
                   测试结果对比以及总结性评价。



                              

性能测试的应用领域
4）性能测试常用工具的原理
脚本生成器---压力生成器---压力控制器---结果分析器
loadrunner原理：


2.Loadrunner的基本操作
Loadrunner的原理分析
Loadrunner脚本的开发流程
Loadrunner的三个基本组件（1）VuGen：基本设置、检查点、参数化、关联、调试、事务
                        （2）Controller：场景设计、场景执行、资源监控、集合点
                                         IP欺骗、负载均衡
                        （3）Analysis：摘要报告、常见图分析、结果分析实践

loadrunner的功能：
VuGen：轻松创建虚拟用户。
Controller：创建真实的负载
定位性能问题
分析结果以精确定位问题所在
重复测试保证系统发布的高性能。

3.系统的监控、分析和调优
Windows/Linux的监控、分析、调优
数据库的监控、分析、调优
中间件的监控、分析、调优


下面是我的手工测试准备文档，希望能给大家带来一定的帮助。
一、测试内容
    确定自己的测试对象是什么，一个软件，什么软件；或者一个模块，什么模块。
二、使用场景
    用户在什么情况下会使用该软件或者模块，期望达到什么效果，用户关注什么。
三、测试重点
    本次测试的重点是什么，功能健壮性还是性能或者其他方面。
四、测试环境
    在什么环境下测试，对于数据库有无要求，数据量有无要求，操作系统有无要求，存不存在制约
    软件使用的硬件等等；
五、实现机制
   作为一个测试，我们也许不需要了解一个软件的实现细节。但是基本的实现流程，我们绝对需要了
   解，它可以帮我们快速锁定软件的危险区，提高我们的测试效率。
六、日志路径
    测试软件之前，一定要确定日志文件在哪里。作为一个测试，定位bug产生的点是我们必不可少的
    一个工作，有日志的话，相信大家可以快速确定一个bug的级别高低。最近我就遇到一个bug。界
    面上只是一条打印信息错误，从日志中一看，哇塞，数据库都报错了，问题立马上纲上线了。
七、版本差异
    如果是一个增量版本，请确定是否存在版本差异。本次测试版本与上个版本不同点在哪里，需要
    关注什么，这点很重要。因为很多软件，外观可能没有变动，里面早已今非昔比。
以上七点是我今日总结的一些内容，每一点都是用职场的跟头换来的，希望对大家有所帮助。

接口测试：
为什么要做接口测试
接口的由来：连接前端和后端。
1.节约时间，缩短项目时间
2.提高工作效率
3.提高系统的健壮性
接口测试入门：什么是接口测试：-分清接口类型
                              -接口分类：post、get、put、delete
                              -不同类型间的差异
              接口测试流程
              接口测试工具
一、什么是接口？
接口的种类：-外部接口
            -内部接口：-上层服务于下层服务
                       -同级服务
接口的分类：http请求
-post：post请求的数据是放在webform里面的，以表单形式提交。
-get：get请求是通过地址栏提交的。
-delete
-put
不同接口类型的差异：
-参数提交方式
-请求数据大小
-安全性

接口测试流程：
重点：
-设计用例：-功能：是否正常，是否按照接口文档设计
           -逻辑业务：是否依赖业务，
           -异常：-参数异常:关键字参数、参数为空、多，少参数、错误参数
                  -数据异常：关键字数据、数据为空、长度不一致、错误数据
           -安全：cookie、header、唯一识别码

为什么要设计测试用例？
-理清思路，避免漏测
-提高测试效率
-跟进测试进度
-告诉领导做过
-跟进重复性工作

-接口测试流程：-需求讨论
               -需求评审
               -场景设计
               -用例设计
               -数据准备
               -执行

二、接口测试工具
-fidder：-fiddler运用
         -fiddler工作原理
-postman：post/get接口实战
-wireshark
-soapui
-python、php（接口自动化讲）
-loadrunner（接口性能讲）
-httprequest
-JMeter（接口性能讲）

目的：提高工作效率

如何选择接口测试工具？
1.时间
2.简易程度
3.业务复杂度
4.测试员能力

接口测试工具分类
1.抓取接口
抓包工具分析与抉择：
-httpwatch（ie浏览器，firefox）
-wireshark：是经过电脑的所有请求，它都会去抓取，看数据也比较麻烦。
-fiddler：我们经常用的就是fiddler，是抓包工具的不二选择，还有其他功能。

2.测试接口
-loadrunner：性能测试工具和接口测试。
-fiddler：
-soapui：接口和自动化自行
-JMeter
-postman：接口测试插件（比较重要的选择）

3.接口测试三剑客
-fiddler
-postman
-python自己开发

4.Fiddler
作用：
-独立的可以直接抓http请求
-小巧，功能完善
-快捷，启动就行
-代理方便

什么是fiddler：
-fiddler是一个http协议调试代理工具，它能够记录并检查所有你的电脑和互联网之间
http通讯，设置断点，查看所有的“进出”fiddler的数据。

fiddler的工作原理：
fiddler界面简介
fiddler的运用：
-查看接口请求方式
-查看请求数据、响应数据
-接口返回状态
-设置代理
-header、cookie
-设置断点
-添加筛选
-fiddler进行接口测试

5.postman
如何自动反复测试一个需要携带header的post请求，并且对针对线上、测试环境同一个数据进行测
试。并对实际结果作比较，以作为测试结果？

测试员必经之路：
逻辑清晰--表达、理解力强--看懂代码--会写代码--会改代码--我来做

postman的运用：
-多接口一起使用
-方便回归
-提高技能水平

6.python自动化
python接口测试脚本
-get请求实现方式：-定义接口地址
                  -定义请求数据
                  -整理请求数据
                  -发送数据请求结果
#-*-coding:utf8-*-
import urllib
import urllib2
url = "http://reg.haibian.com/login/ajax_login"
#定义请求数据，并且对数据进行赋值
data = {}
data['loginname'] =' student08@qq.com'
data['password'] = '111111'
#对请求数据进行编码
data = urllib.urlencode(data)
#将数据和url进行连接
request = url + "?" + data
#打开请求，获取对象
requestResponse = urllib2.urlopen(request)
#读取服务端返回的数据
ResponseStr = requestResponse.read()
#打印数据
ResponseStr = ResponseStr.decode('unicode_escape')
print(ResponseStr)

-post请求
与get请求，提交数据格式不一样。
#-*-coding:utf8-*-
import urllib
import urllib2
url = "http://xapi.kybyun.com/user/login"
headers = {'Host':'xapi.kybyun.com',
           'Connection':'keep-alive',
           'User-Agent':'BangxueTang AipBot/1.0(BangXueTang-IOS/2.1.3.1;ios/9.30;iPhone 6 Plus)',
           'KY-UKEY':'940cd0dffd371d41eb0acbb7694fd5e9',
           'KY-SYSDEV':'iPhone 6 Plus',
           'KY-SPEID':'10010101',
           'KY-SCHID':'1044',
           'KY-APPCHG':'AppStore',
           'Connection':'keep-alive',
           'KY-UUID':'6ff7563dbd47c8077905c3920bc0d8b3',
           'KY-YEAR':'2017',
           'Accept-Language':'zh-Hans-CN;q=1',
           'KY-SYSVER':'9.3',
           'Accept':'*/*',
           'Content-Type':'application/x-www-form-urlencoded',
           'KY-APPVER':'2.1.3.1',
           'KY-APPVERS':'4',
           'KY-APPTYPE':'21'
}
data = {}
data['appchg'] = 'AppStore'
data['apptype'] = '21'
data['appver'] = '2.1.3.1'
data['email'] = 'mushishi01'
data['isbind'] = '0'
data['passwd'] = '111111'
data['sysdev'] = 'iphone 6 plus'
data['sysver'] = '9.3'
data['uuid'] = '6ff7563dbd47c8077905c3920bc0d8b3'
#数据编码以及赋值
data = urllib.urlencode(data)
req = urllib2.Request(url,data,header)
#打开变量地址并且赋值给变量
ResponseStr = urllib2.urlopen(req)
#读取获得的值
ResponseStr = ResponseStr.read()
ResponseStr = ResponseStr.decode('unicode_escape')
print(ResponseStr)

